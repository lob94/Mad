//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Es.Udc.DotNet.MiniPortal.Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    public partial class Comment
    {
        public Comment()
        {
            this.Labels = new HashSet<Label>();
        }
    
        public long commentId { get; set; }
        public Nullable<long> userId { get; set; }
        public Nullable<long> eventId { get; set; }
        public string loginName { get; set; }
        public string content { get; set; }
        public System.DateTime commentDate { get; set; }
    
        public virtual Event Event { get; set; }
        public virtual UserProfile UserProfile { get; set; }
        public virtual ICollection<Label> Labels { get; set; }
    
    	/// <summary>
    	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
    	//  like a hash table. It uses the Josh Bloch implementation from "Effective Java"
    	/// </summary>
    	/// <returns>
    	/// Returns a hash code for this instance.
    	/// </returns>
    	public override int GetHashCode()
    	{
    	    unchecked
    	    {
    			int multiplier = 31;
    			int hash = GetType().GetHashCode();
    
    			hash = hash * multiplier + commentId.GetHashCode();
    			hash = hash * multiplier + (userId == null ? 0 : userId.GetHashCode());
    			hash = hash * multiplier + (eventId == null ? 0 : eventId.GetHashCode());
    			hash = hash * multiplier + (loginName == null ? 0 : loginName.GetHashCode());
    			hash = hash * multiplier + (content == null ? 0 : content.GetHashCode());
    			hash = hash * multiplier + commentDate.GetHashCode();
    
    			return hash;
    	    }
    
    	}
        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
    	public override bool Equals(object obj)
    	{
    	    Comment target = (Comment)obj;
    
    		return true
               &&  (this.commentId == target.commentId )       
               &&  (this.userId == target.userId )       
               &&  (this.eventId == target.eventId )       
               &&  (this.loginName == target.loginName )       
               &&  (this.content == target.content )       
               &&  (this.commentDate == target.commentDate )       
               ;
    
        }
    
        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
    	public override String ToString()
    	{
    	    StringBuilder strComment = new StringBuilder();
    
    		strComment.Append("[ ");
           strComment.Append(" commentId = " + commentId + " | " );       
           strComment.Append(" userId = " + userId + " | " );       
           strComment.Append(" eventId = " + eventId + " | " );       
           strComment.Append(" loginName = " + loginName + " | " );       
           strComment.Append(" content = " + content + " | " );       
           strComment.Append(" commentDate = " + commentDate + " | " );       
            strComment.Append("] ");    
    
    		return strComment.ToString();
        }
    
    
    }
}
